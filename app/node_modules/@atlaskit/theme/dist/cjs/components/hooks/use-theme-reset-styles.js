"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SELECTOR = void 0;

var _react = require("react");

var _colors = require("../../colors");

var SELECTOR = 'old-ds-theme-mode';
exports.SELECTOR = SELECTOR;
var baseResetStyles = [{
  theme: {
    mode: 'light'
  }
}, {
  theme: {
    mode: 'dark'
  }
}].map(function (theme) {
  return "\n  .".concat(theme.theme.mode, "-").concat(SELECTOR, " {\n    color: ").concat((0, _colors.text)(theme), ";\n  }\n  .").concat(theme.theme.mode, "-").concat(SELECTOR, " a {\n    color: ").concat((0, _colors.link)(theme), ";\n  }\n  .").concat(theme.theme.mode, "-").concat(SELECTOR, " a:hover {\n    color: ").concat((0, _colors.linkHover)(theme), ";\n  }\n  .").concat(theme.theme.mode, "-").concat(SELECTOR, " a:active {\n    color: ").concat((0, _colors.linkActive)(theme), ";\n  }\n  .").concat(theme.theme.mode, "-").concat(SELECTOR, " a:focus {\n    outlineColor: ").concat((0, _colors.linkOutline)(theme), ";\n  }\n  .").concat(theme.theme.mode, "-").concat(SELECTOR, " h1,\n  .").concat(theme.theme.mode, "-").concat(SELECTOR, " h2,\n  .").concat(theme.theme.mode, "-").concat(SELECTOR, " h3,\n  .").concat(theme.theme.mode, "-").concat(SELECTOR, " h4,\n  .").concat(theme.theme.mode, "-").concat(SELECTOR, " h5 {\n    color: ").concat((0, _colors.heading)(theme), ";\n  }\n  .").concat(theme.theme.mode, "-").concat(SELECTOR, " h6 {\n    color: ").concat((0, _colors.subtleHeading)(theme), ";\n  }\n  .").concat(theme.theme.mode, "-").concat(SELECTOR, " small {\n    color: ").concat((0, _colors.subtleText)(theme), ";\n  }");
}).join('\n');

var getStylesheetResetCSS = function getStylesheetResetCSS(backgroundColor) {
  return "body { background: ".concat(backgroundColor, "; }");
};

var UNIQUE_INTERNAL_ID = 'ds--theme--ak-theme-provider';
/**
 * This hooks conditionally sets body styles based on the theme mode applied.
 *
 * @param backgroundColor The background color to be applied at the root level of the application
 */

var useThemeResetStyles = function useThemeResetStyles(backgroundColor) {
  var stylesheet = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    var hasNode = document.getElementById(UNIQUE_INTERNAL_ID); // Bail out if the AKThemeProvider has already set the body
    // Child nodes should not take precedence over a root node setting body bg

    if (hasNode) {
      return;
    }

    stylesheet.current = document.createElement('style');

    if (document && document.head) {
      stylesheet.current.id = UNIQUE_INTERNAL_ID;
      var firstStyleElement = document.head.querySelector('style:not([data-styled-components],[data-emotion])'); // This is _likely_ to be the css reset, ideally this isn't required as we shouldn't
      // reset background color here, but it's still relied on by editor and mobile.

      if (firstStyleElement) {
        document.head.insertBefore(stylesheet.current, firstStyleElement.nextSibling);
      } else {
        document.head.prepend(stylesheet.current);
      }
    }

    return function () {
      if (stylesheet.current && document && document.head) {
        document.head.removeChild(stylesheet.current);
        stylesheet.current = null;
      }
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (stylesheet.current) {
      var css = getStylesheetResetCSS(backgroundColor);
      stylesheet.current.innerHTML = css + baseResetStyles;
    }
  }, [backgroundColor]);
};

var _default = useThemeResetStyles;
exports.default = _default;