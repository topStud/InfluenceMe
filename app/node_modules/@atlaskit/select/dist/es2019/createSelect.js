import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { Component } from 'react';
import { mergeStyles } from 'react-select';
import memoizeOne from 'memoize-one';
import isEqual from 'react-fast-compare';
import * as defaultComponents from './components';
import baseStyles from './styles';
export default function createSelect(WrappedComponent) {
  var _class, _temp;

  return _temp = _class = class AtlaskitSelect extends Component {
    constructor(props) {
      super(props);

      _defineProperty(this, "components", {});

      _defineProperty(this, "select", null);

      _defineProperty(this, "cacheComponents", components => {
        this.components = { ...defaultComponents,
          ...components
        };
      });

      _defineProperty(this, "onSelectRef", ref => {
        this.select = ref;
        const {
          innerRef
        } = this.props;

        if (typeof innerRef === 'object') {
          innerRef.current = ref;
        }

        if (typeof innerRef === 'function') {
          innerRef(ref);
        }
      });

      this.cacheComponents = memoizeOne(this.cacheComponents, isEqual).bind(this);
      this.cacheComponents(props.components || {});
    }

    UNSAFE_componentWillReceiveProps(nextProps) {
      this.cacheComponents(nextProps.components);
    }

    focus() {
      if (this.select) {
        this.select.focus();
      }
    }

    blur() {
      if (this.select) {
        this.select.blur();
      }
    }

    render() {
      const {
        styles,
        validationState,
        spacing,
        isMulti,
        ...props
      } = this.props;
      const isCompact = spacing === 'compact'; // props must be spread first to stop `components` being overridden

      return /*#__PURE__*/React.createElement(WrappedComponent, _extends({
        ref: this.onSelectRef,
        isMulti: isMulti,
        "aria-live": "assertive"
      }, props, {
        components: this.components,
        styles: mergeStyles(baseStyles(validationState, isCompact), styles)
      }));
    }

  }, _defineProperty(_class, "defaultProps", {
    validationState: 'default',
    spacing: 'default',
    onClickPreventDefault: true,
    tabSelectsValue: false,
    components: {},
    styles: {}
  }), _temp;
}