"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = baseStyles;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _constants = require("@atlaskit/theme/constants");

var _colors = require("@atlaskit/theme/colors");

var _tokens = require("@atlaskit/tokens");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var BORDER_WIDTH = 2;
var ICON_PADDING = 2;
var paddingExcludingBorder = (0, _constants.gridSize)() - BORDER_WIDTH;

function baseStyles(validationState, isCompact) {
  return {
    container: function container(css, _ref) {
      var isDisabled = _ref.isDisabled;
      return _objectSpread(_objectSpread({}, css), {}, {
        fontFamily: (0, _constants.fontFamily)(),
        // react-select disables pointer events when isDisabled is true.
        // We override this and make the inner container turn it off instead.
        pointerEvents: 'all',
        cursor: isDisabled ? 'not-allowed' : undefined
      });
    },
    input: function input(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        color: (0, _tokens.token)('color.text.highEmphasis', 'hsl(0, 0%, 20%)')
      });
    },
    control: function control(css, _ref2) {
      var isFocused = _ref2.isFocused,
          isDisabled = _ref2.isDisabled;
      var borderColor = isFocused ? (0, _tokens.token)('color.border.focus', _colors.B100) : (0, _tokens.token)('color.border.neutral', _colors.N20);
      var backgroundColor = isFocused ? (0, _tokens.token)('color.background.default', _colors.N0) : (0, _tokens.token)('color.background.subtleNeutral.resting', _colors.N20);
      var backgroundColorHover = isFocused ? (0, _tokens.token)('color.background.default', _colors.N0) : (0, _tokens.token)('color.background.default', _colors.N30);

      if (isDisabled) {
        backgroundColor = (0, _tokens.token)('color.background.subtleNeutral.resting', _colors.N20);
        borderColor = (0, _tokens.token)('color.background.disabled', _colors.N20);
      }

      if (validationState === 'error') {
        borderColor = (0, _tokens.token)('color.iconBorder.danger', _colors.R400);
      }

      if (validationState === 'success') {
        borderColor = (0, _tokens.token)('color.iconBorder.success', _colors.G400);
      }

      var borderColorHover = isFocused ? (0, _tokens.token)('color.border.focus', _colors.B100) : (0, _tokens.token)('color.border.neutral', _colors.N30);

      if (validationState === 'error') {
        borderColorHover = (0, _tokens.token)('color.iconBorder.danger', _colors.R400);
      }

      if (validationState === 'success') {
        borderColorHover = (0, _tokens.token)('color.iconBorder.success', _colors.G400);
      }

      var transitionDuration = '200ms';
      return _objectSpread(_objectSpread({}, css), {}, {
        // Turn pointer events off when disabled - this makes it so hover etc don't work.
        pointerEvents: isDisabled ? 'none' : undefined,
        backgroundColor: backgroundColor,
        borderColor: borderColor,
        borderStyle: 'solid',
        borderRadius: '3px',
        borderWidth: '2px',
        boxShadow: 'none',
        minHeight: isCompact ? (0, _constants.gridSize)() * 4 : (0, _constants.gridSize)() * 5,
        padding: 0,
        transition: "background-color ".concat(transitionDuration, " ease-in-out,\n        border-color ").concat(transitionDuration, " ease-in-out"),
        '::-webkit-scrollbar': {
          height: (0, _constants.gridSize)(),
          width: (0, _constants.gridSize)()
        },
        '::-webkit-scrollbar-corner': {
          display: 'none'
        },
        ':hover': {
          '::-webkit-scrollbar-thumb': {
            // scrollbars occur only if the user passes in a custom component with overflow: scroll
            // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
            backgroundColor: 'rgba(0,0,0,0.2)'
          },
          cursor: 'pointer',
          backgroundColor: backgroundColorHover,
          borderColor: borderColorHover
        },
        '::-webkit-scrollbar-thumb:hover': {
          // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
          backgroundColor: 'rgba(0,0,0,0.4)'
        }
      });
    },
    valueContainer: function valueContainer(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        paddingLeft: paddingExcludingBorder,
        paddingRight: paddingExcludingBorder,
        paddingBottom: isCompact ? 0 : 2,
        paddingTop: isCompact ? 0 : 2
      });
    },
    clearIndicator: function clearIndicator(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        color: (0, _tokens.token)('color.text.lowEmphasis', _colors.N70),
        paddingLeft: ICON_PADDING,
        paddingRight: ICON_PADDING,
        paddingBottom: isCompact ? 0 : 6,
        paddingTop: isCompact ? 0 : 6,
        ':hover': {
          color: (0, _tokens.token)('color.text.mediumEmphasis', _colors.N500)
        }
      });
    },
    loadingIndicator: function loadingIndicator(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        paddingBottom: isCompact ? 0 : 6,
        paddingTop: isCompact ? 0 : 6
      });
    },
    dropdownIndicator: function dropdownIndicator(css, _ref3) {
      var isDisabled = _ref3.isDisabled;
      var color = (0, _tokens.token)('color.text.mediumEmphasis', _colors.N500);

      if (isDisabled) {
        color = (0, _tokens.token)('color.text.disabled', _colors.N70);
      }

      return _objectSpread(_objectSpread({}, css), {}, {
        color: color,
        paddingLeft: ICON_PADDING,
        paddingRight: ICON_PADDING,
        paddingBottom: isCompact ? 0 : 6,
        paddingTop: isCompact ? 0 : 6,
        ':hover': {
          color: (0, _tokens.token)('color.text.mediumEmphasis', _colors.N200)
        }
      });
    },
    indicatorsContainer: function indicatorsContainer(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        paddingRight: paddingExcludingBorder - ICON_PADDING
      });
    },
    option: function option(css, _ref4) {
      var isFocused = _ref4.isFocused,
          isSelected = _ref4.isSelected,
          isDisabled = _ref4.isDisabled;
      var color = (0, _tokens.token)('color.text.highEmphasis', _colors.N800);

      if (isDisabled) {
        color = (0, _tokens.token)('color.text.disabled', _colors.N70);
      } else if (isSelected) {
        color = (0, _tokens.token)('color.text.selected', _colors.B400);
      }

      var boxShadow;
      var backgroundColor;

      if (isDisabled) {
        backgroundColor = undefined;
      } else if (isSelected && isFocused) {
        backgroundColor = (0, _tokens.token)('color.background.selected.hover', _colors.B50);
      } else if (isSelected) {
        backgroundColor = (0, _tokens.token)('color.background.selected.resting', _colors.B50);
      } else if (isFocused) {
        backgroundColor = (0, _tokens.token)('color.background.transparentNeutral.hover', _colors.N20);
      }

      if (!isDisabled && (isFocused || isSelected)) {
        boxShadow = "inset 2px 0px 0px ".concat((0, _tokens.token)('color.text.selected', _colors.B400));
      }

      var cursor = isDisabled ? 'not-allowed' : undefined;
      return _objectSpread(_objectSpread({}, css), {}, {
        padding: '6px 12px',
        backgroundColor: backgroundColor,
        color: color,
        cursor: cursor,
        boxShadow: boxShadow,
        ':active': {
          backgroundColor: !isDisabled ? isSelected ? (0, _tokens.token)('color.background.selected.pressed', _colors.N20) : (0, _tokens.token)('color.background.transparentNeutral.pressed', _colors.N30) : undefined
        },
        '@media screen and (-ms-high-contrast: active)': {
          borderLeft: !isDisabled && (isFocused || isSelected) ? '2px solid transparent' : ''
        }
      });
    },
    placeholder: function placeholder(css, _ref5) {
      var isDisabled = _ref5.isDisabled;
      return _objectSpread(_objectSpread({}, css), {}, {
        color: isDisabled ? (0, _tokens.token)('color.text.disabled', _colors.N300) : (0, _tokens.token)('color.text.lowEmphasis', _colors.N300)
      });
    },
    singleValue: function singleValue(css, _ref6) {
      var isDisabled = _ref6.isDisabled;
      return _objectSpread(_objectSpread({}, css), {}, {
        color: isDisabled ? (0, _tokens.token)('color.text.disabled', _colors.N70) : (0, _tokens.token)('color.text.highEmphasis', _colors.N800),
        lineHeight: "".concat((0, _constants.gridSize)() * 2, "px") // 16px

      });
    },
    menu: function menu(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        backgroundColor: (0, _tokens.token)('color.background.overlay', 'white'),
        boxShadow: (0, _tokens.token)('shadow.overlay', '0 0 0 1px hsl(0deg 0% 0% / 10%), 0 4px 11px hsl(0deg 0% 0% / 10%)')
      });
    },
    menuList: function menuList(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        paddingTop: (0, _constants.gridSize)(),
        paddingBottom: (0, _constants.gridSize)()
      });
    },
    multiValue: function multiValue(css, _ref7) {
      var isFocused = _ref7.isFocused;
      return _objectSpread(_objectSpread({}, css), {}, {
        borderRadius: '2px',
        backgroundColor: isFocused ? (0, _tokens.token)('color.background.selected.resting', _colors.N40) : (0, _tokens.token)('color.background.transparentNeutral.hover', _colors.N40),
        boxShadow: isFocused ? "0 0 0 2px ".concat((0, _tokens.token)('color.background.default', 'transparent'), ", 0 0 0 4px ").concat((0, _tokens.token)('color.border.focus', 'transparent')) : 'none',
        maxWidth: '100%',
        '@media screen and (-ms-high-contrast: active)': {
          border: isFocused ? '1px solid transparent' : 'none'
        }
      });
    },
    multiValueLabel: function multiValueLabel(css, _ref8) {
      var isFocused = _ref8.isFocused;
      return _objectSpread(_objectSpread({}, css), {}, {
        padding: '2px',
        color: isFocused ? (0, _tokens.token)('color.text.selected', 'hsl(0, 0%, 20%)') : (0, _tokens.token)('color.text.highEmphasis', 'hsl(0, 0%, 20%)'),
        paddingRight: '2px'
      });
    },
    multiValueRemove: function multiValueRemove(css, _ref9) {
      var isFocused = _ref9.isFocused;
      return _objectSpread(_objectSpread({}, css), {}, {
        backgroundColor: isFocused && (0, _tokens.token)('color.background.selected.resting', _colors.R75),
        fill: isFocused ? (0, _tokens.token)('color.text.selected', '#000') : (0, _tokens.token)('color.text.highEmphasis', '#000'),
        paddingLeft: '2px',
        paddingRight: '2px',
        borderRadius: '0px 2px 2px 0px',
        ':hover': {
          backgroundColor: (0, _tokens.token)('color.background.subtleDanger.hover', _colors.R75),
          fill: (0, _tokens.token)('color.text.danger', '#000')
        },
        ':active': {
          backgroundColor: (0, _tokens.token)('color.background.subtleDanger.pressed', _colors.R75),
          fill: (0, _tokens.token)('color.text.danger', '#000')
        }
      });
    }
  };
}