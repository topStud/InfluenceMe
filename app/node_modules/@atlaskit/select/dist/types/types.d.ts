/// <reference types="react" />
import { WithAnalyticsEventsProps } from '@atlaskit/analytics-next';
import { Props as ReactSelectProps, FormatOptionLabelMeta as RSFormatOptionLabelMeta, ValueType as RSValueType, ActionMeta as RSActionMeta, GroupTypeBase as GroupType, OptionsType as RSOptionsType, SelectComponentsConfig as RSSelectComponentsConfig, IndicatorComponentType as RSIndicatorComponentType, StylesConfig as RSStylesConfig, InputActionMeta as RSInputActionMeta, IndicatorProps as RSIndicatorProps, ControlProps as RSControlProps, GroupProps as RSGroupProps, InputProps, MenuProps as RSMenuProps, MenuListComponentProps as RSMenuListComponentProps, MultiValueProps, OptionProps as ReactSelectOptionProps, PlaceholderProps as RSPlaceholderProps, SingleValueProps, ValueContainerProps as RSValueContainerProps, GroupedOptionsType } from 'react-select';
import { AsyncProps as ReactAsyncSelectProps } from 'react-select/async';
export declare type ValidationState = 'default' | 'error' | 'success';
export interface OptionType {
    [key: string]: any;
    label: string;
    value: string | number;
}
export declare type OptionsType<Option = OptionType> = RSOptionsType<Option>;
export interface OptionProps<Option = OptionType, IsMulti extends boolean = false> extends ReactSelectOptionProps<Option, IsMulti> {
    [key: string]: any;
    Icon?: React.ComponentType<{
        label: string;
        size?: 'small' | 'medium' | 'large' | 'xlarge';
        onClick?: (e: MouseEvent) => void;
        primaryColor?: string;
        secondaryColor?: string;
    }>;
    isDisabled: boolean;
    isFocused: boolean;
    isSelected: boolean;
}
export interface SelectProps<OptionType, IsMulti extends boolean = false> extends ReactSelectProps<OptionType, IsMulti>, WithAnalyticsEventsProps {
    spacing?: 'compact' | 'default';
    validationState?: ValidationState;
}
export declare type ActionMeta<Option = OptionType> = RSActionMeta<Option>;
export declare type InputActionMeta = RSInputActionMeta;
export declare type ControlProps<OptionType, IsMulti extends boolean = false> = RSControlProps<OptionType, IsMulti>;
export declare type FormatOptionLabelMeta<OptionType, IsMulti extends boolean = false> = RSFormatOptionLabelMeta<OptionType, IsMulti>;
export declare type IndicatorProps<OptionType, IsMulti extends boolean = false> = RSIndicatorProps<OptionType, IsMulti>;
export declare type IndicatorComponentType<OptionType, IsMulti extends boolean = false> = RSIndicatorComponentType<OptionType, IsMulti>;
export declare type ValueType<OptionType, IsMulti extends boolean = false> = RSValueType<OptionType, IsMulti>;
export declare type StylesConfig<Option = OptionType, IsMulti extends boolean = false> = RSStylesConfig<Option, IsMulti>;
export declare type SelectComponentsConfig<OptionType, IsMulti extends boolean = false> = RSSelectComponentsConfig<OptionType, IsMulti>;
export declare type GroupProps<OptionType, IsMulti extends boolean = false> = RSGroupProps<OptionType, IsMulti>;
export declare type MenuProps<OptionType, IsMulti extends boolean = false> = RSMenuProps<OptionType, IsMulti>;
export declare type MenuListComponentProps<OptionType, IsMulti extends boolean = false> = RSMenuListComponentProps<OptionType, IsMulti>;
export declare type PlaceholderProps<OptionType, IsMulti extends boolean = false> = RSPlaceholderProps<OptionType, IsMulti>;
export declare type ValueContainerProps<OptionType, IsMulti extends boolean = false> = RSValueContainerProps<OptionType, IsMulti>;
export type { GroupType, InputProps, MultiValueProps, ReactAsyncSelectProps, ReactSelectProps, SingleValueProps, GroupedOptionsType, };
