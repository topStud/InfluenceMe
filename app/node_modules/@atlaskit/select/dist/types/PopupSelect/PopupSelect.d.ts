import React, { PureComponent, ReactNode } from 'react';
import Select from 'react-select';
import { FocusTrap } from 'focus-trap';
import { PopperProps } from 'react-popper';
import { GroupType, OptionType, ActionMeta, ReactSelectProps, StylesConfig, ValueType } from '../types';
declare type defaultModifiers = 'offset' | 'preventOverflow';
declare type PopperPropsNoChildren<Modifiers> = Omit<PopperProps<Modifiers>, 'children'>;
interface PopupSelectTriggerProps {
    ref: any;
    'aria-haspopup': 'true';
    'aria-expanded': boolean;
    'aria-controls'?: string;
}
export interface PopupSelectProps<Option = OptionType, IsMulti extends boolean = false, Modifiers = {}> extends ReactSelectProps<Option, IsMulti> {
    closeMenuOnSelect?: boolean;
    footer?: ReactNode;
    popperProps?: PopperPropsNoChildren<Modifiers>;
    searchThreshold?: number;
    target?: (options: PopupSelectTriggerProps & {
        isOpen: boolean;
    }) => ReactNode;
}
interface State<Modifiers = {}> {
    isOpen: boolean;
    mergedComponents: Object;
    mergedPopperProps: PopperPropsNoChildren<defaultModifiers | Modifiers>;
}
export default class PopupSelect<Option = OptionType, IsMulti extends boolean = false> extends PureComponent<PopupSelectProps<Option, IsMulti>, State> {
    focusTrap: FocusTrap | null;
    menuRef: HTMLElement | null;
    selectRef: Select<Option, IsMulti> | null;
    targetRef: HTMLElement | null;
    defaultStyles: StylesConfig<Option, IsMulti>;
    state: {
        isOpen: boolean;
        mergedComponents: {
            Control: React.FC<import("react-select").ControlProps<OptionType, boolean, GroupType<OptionType>>>;
            DropdownIndicator: () => JSX.Element;
            Menu: ({ children, innerProps, ...props }: import("react-select").MenuProps<OptionType, boolean, GroupType<OptionType>>) => JSX.Element;
        };
        mergedPopperProps: Pick<PopperProps<defaultModifiers>, "innerRef" | "modifiers" | "placement" | "strategy" | "referenceElement" | "onFirstUpdate">;
    };
    popperWrapperId: string;
    static defaultProps: {
        closeMenuOnSelect: boolean;
        components: {};
        maxMenuHeight: number;
        maxMenuWidth: number;
        minMenuWidth: number;
        popperProps: {};
        searchThreshold: number;
        styles: {};
        options: never[];
    };
    static getDerivedStateFromProps(props: PopupSelectProps<OptionType>, state: State): Partial<State<{}>> | null;
    componentDidMount(): void;
    componentWillUnmount(): void;
    handleKeyDown: (event: KeyboardEvent) => void;
    handleClick: ({ target }: MouseEvent) => void;
    handleSelectChange: (value: ValueType<Option, IsMulti>, actionMeta: ActionMeta<Option>) => void;
    open: () => void;
    initialiseFocusTrap: () => void;
    close: () => void;
    resolveTargetRef: (popperRef: React.Ref<HTMLElement>) => (ref: HTMLElement) => void;
    resolveMenuRef: (popperRef: React.Ref<HTMLElement>) => (ref: HTMLElement) => void;
    getSelectRef: (ref: Select<Option, IsMulti>) => void;
    getItemCount: () => number;
    getMaxHeight: () => number | undefined;
    showSearchControl: () => boolean;
    renderSelect: () => JSX.Element | null;
    render(): JSX.Element;
}
export {};
